import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

# =============================
# 1. C·∫•u h√¨nh ·ª©ng d·ª•ng
# =============================
st.set_page_config(page_title="D·ª± ƒëo√°n Doanh thu v·ªõi Linear Regression", layout="wide")
st.title("üìä Ph√¢n t√≠ch & D·ª± ƒëo√°n Doanh thu (Linear Regression)")

# =============================
# 2. Upload file Excel
# =============================
uploaded_file = st.file_uploader("‚¨ÜÔ∏è T·∫£i file Excel d·ªØ li·ªáu b√°n h√†ng", type=["xlsx"])

if uploaded_file is not None:
    # ---------------------------
    # 3. ƒê·ªçc d·ªØ li·ªáu
    # ---------------------------
    df = pd.read_excel(uploaded_file)
    df["Ng√†y"] = pd.to_datetime(df["Ng√†y"])
    st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu th√†nh c√¥ng!")

    # ---------------------------
    # 4. Feature Engineering
    # ---------------------------
    df["PQ"] = df["Gi√°"] * df["S·ªë l∆∞·ª£ng"]
    df["Disc_PQ"] = (df["Gi·∫£m gi√° (%)"]/100) * df["PQ"]
    df["Th√°ng"] = df["Ng√†y"].dt.month
    df["Ng√†y_trong_tu·∫ßn"] = df["Ng√†y"].dt.dayofweek

    # ---------------------------
    # 5. Th·ªëng k√™ nhanh
    # ---------------------------
    st.subheader("üìå T√≥m t·∫Øt kinh doanh")
    st.metric("T·ªïng doanh thu", f"{df['Doanh thu'].sum():,.0f} VND")
    st.metric("Doanh thu TB/ng√†y", f"{df.groupby('Ng√†y')['Doanh thu'].sum().mean():,.0f} VND")

    # ---------------------------
    # 6. Chu·∫©n b·ªã d·ªØ li·ªáu cho ML
    # ---------------------------
    numeric_features = ["PQ", "Disc_PQ", "Th√°ng", "Ng√†y_trong_tu·∫ßn"]
    categorical_features = ["Danh m·ª•c", "Nh√† cung c·∫•p", "Khu v·ª±c", "Kh√°ch h√†ng", "Ph∆∞∆°ng th·ª©c thanh to√°n", "S·∫£n ph·∫©m"]

    X = df[numeric_features + categorical_features]
    y = df["Doanh thu"]

    preprocessor = ColumnTransformer([
        ("num", "passthrough", numeric_features),
        ("cat", OneHotEncoder(handle_unknown="ignore"), categorical_features)
    ])

    model = Pipeline([
        ("preprocessor", preprocessor),
        ("lr", LinearRegression())
    ])

    # ---------------------------
    # 7. Train/Test split + Fit
    # ---------------------------
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    # ---------------------------
    # 8. Bi·ªÉu ƒë·ªì Actual vs Predicted
    # ---------------------------
    st.subheader("üìà So s√°nh Doanh thu th·ª±c t·∫ø vs D·ª± ƒëo√°n")

    fig, ax = plt.subplots(figsize=(7,5))
    ax.scatter(y_test, y_pred, alpha=0.6, color="blue", label="D·ª± ƒëo√°n")
    ax.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], "r--", label="ƒê∆∞·ªùng y=x")
    ax.set_xlabel("Th·ª±c t·∫ø")
    ax.set_ylabel("D·ª± ƒëo√°n")
    ax.set_title("Actual vs Predicted (Linear Regression)")
    ax.legend()
    st.pyplot(fig)

    # ---------------------------
    # 9. Form nh·∫≠p li·ªáu d·ª± ƒëo√°n m·ªõi
    # ---------------------------
    st.subheader("üìù D·ª± ƒëo√°n Doanh thu cho ƒë∆°n h√†ng m·ªõi")

    with st.form("predict_form"):
        soluong = st.number_input("S·ªë l∆∞·ª£ng", min_value=1, value=1)
        gia = st.number_input("Gi√° (VND)", min_value=1000, value=1000000, step=1000)
        giamgia = st.slider("Gi·∫£m gi√° (%)", 0, 50, 0)
        thang = st.selectbox("Th√°ng", list(range(1,13)))
        ngay_trong_tuan = st.selectbox("Ng√†y trong tu·∫ßn (0=Th·ª© 2)", list(range(7)))
        danhmuc = st.selectbox("Danh m·ª•c", df["Danh m·ª•c"].unique())
        nhacc = st.selectbox("Nh√† cung c·∫•p", df["Nh√† cung c·∫•p"].unique())
        khuvuc = st.selectbox("Khu v·ª±c", df["Khu v·ª±c"].unique())
        khachhang = st.selectbox("Kh√°ch h√†ng", df["Kh√°ch h√†ng"].unique())
        pt_thanhtoan = st.selectbox("Ph∆∞∆°ng th·ª©c thanh to√°n", df["Ph∆∞∆°ng th·ª©c thanh to√°n"].unique())
        sanpham = st.selectbox("S·∫£n ph·∫©m", df["S·∫£n ph·∫©m"].unique())

        submitted = st.form_submit_button("D·ª± ƒëo√°n Doanh thu")

    if submitted:
        input_df = pd.DataFrame([{
            "PQ": gia * soluong,
            "Disc_PQ": (giamgia/100) * gia * soluong,
            "Th√°ng": thang,
            "Ng√†y_trong_tu·∫ßn": ngay_trong_tuan,
            "Danh m·ª•c": danhmuc,
            "Nh√† cung c·∫•p": nhacc,
            "Khu v·ª±c": khuvuc,
            "Kh√°ch h√†ng": khachhang,
            "Ph∆∞∆°ng th·ª©c thanh to√°n": pt_thanhtoan,
            "S·∫£n ph·∫©m": sanpham
        }])

        prediction = model.predict(input_df)[0]
        st.success(f"üìå Linear Regression d·ª± ƒëo√°n Doanh thu: {prediction:,.0f} VND")

    # ---------------------------
    # 10. D·ª± ƒëo√°n tr·ª±c quan Top s·∫£n ph·∫©m (c·∫£i ti·∫øn)
    # ---------------------------
    st.subheader("üìä D·ª± ƒëo√°n Doanh thu cho Top s·∫£n ph·∫©m (theo gi√° tr·ªã ri√™ng)")

    top_products = df["S·∫£n ph·∫©m"].value_counts().head(5).index

    most_region = df["Khu v·ª±c"].mode()[0]
    most_customer = df["Kh√°ch h√†ng"].mode()[0]
    most_supplier = df["Nh√† cung c·∫•p"].mode()[0]
    most_category = df["Danh m·ª•c"].mode()[0]
    most_payment = df["Ph∆∞∆°ng th·ª©c thanh to√°n"].mode()[0]

    pred_results = []
    for prod in top_products:
        avg_price = df[df["S·∫£n ph·∫©m"] == prod]["Gi√°"].mean()
        avg_qty = df[df["S·∫£n ph·∫©m"] == prod]["S·ªë l∆∞·ª£ng"].mean()
        avg_discount = df[df["S·∫£n ph·∫©m"] == prod]["Gi·∫£m gi√° (%)"].mean()

        input_df = pd.DataFrame([{
            "PQ": avg_price * avg_qty,
            "Disc_PQ": (avg_discount/100) * avg_price * avg_qty,
            "Th√°ng": 6,
            "Ng√†y_trong_tu·∫ßn": 2,
            "Danh m·ª•c": most_category,
            "Nh√† cung c·∫•p": most_supplier,
            "Khu v·ª±c": most_region,
            "Kh√°ch h√†ng": most_customer,
            "Ph∆∞∆°ng th·ª©c thanh to√°n": most_payment,
            "S·∫£n ph·∫©m": prod
        }])

        pred = model.predict(input_df)[0]
        pred_results.append((prod, pred))

    pred_df = pd.DataFrame(pred_results, columns=["S·∫£n ph·∫©m", "Doanh thu d·ª± ƒëo√°n"])

    # Bar chart
    fig, ax = plt.subplots(figsize=(8,5))
    sns.barplot(x="Doanh thu d·ª± ƒëo√°n", y="S·∫£n ph·∫©m", data=pred_df, ax=ax)
    ax.set_title("D·ª± ƒëo√°n Doanh thu cho Top s·∫£n ph·∫©m (theo gi√° tr·ªã ri√™ng)")
    st.pyplot(fig)

    # Line chart
    fig, ax = plt.subplots(figsize=(8,5))
    sns.lineplot(x="S·∫£n ph·∫©m", y="Doanh thu d·ª± ƒëo√°n", data=pred_df, marker="o", ax=ax)
    ax.set_title("Xu h∆∞·ªõng doanh thu d·ª± ƒëo√°n theo s·∫£n ph·∫©m")
    st.pyplot(fig)

    # Pie chart
    fig, ax = plt.subplots(figsize=(6,6))
    ax.pie(pred_df["Doanh thu d·ª± ƒëo√°n"], labels=pred_df["S·∫£n ph·∫©m"], autopct="%1.1f%%", startangle=140)
    ax.set_title("T·ª∑ tr·ªçng doanh thu d·ª± ƒëo√°n gi·ªØa s·∫£n ph·∫©m")
    st.pyplot(fig)

    # Scatter plot: gi√° trung b√¨nh vs doanh thu d·ª± ƒëo√°n
    avg_prices = df.groupby("S·∫£n ph·∫©m")["Gi√°"].mean().reset_index()
    scatter_df = pred_df.merge(avg_prices, on="S·∫£n ph·∫©m", how="left")

    fig, ax = plt.subplots(figsize=(7,5))
    ax.scatter(scatter_df["Gi√°"], scatter_df["Doanh thu d·ª± ƒëo√°n"], s=100, alpha=0.7)
    for i, row in scatter_df.iterrows():
        ax.text(row["Gi√°"], row["Doanh thu d·ª± ƒëo√°n"], row["S·∫£n ph·∫©m"], fontsize=8)
    ax.set_xlabel("Gi√° trung b√¨nh (VND)")
    ax.set_ylabel("Doanh thu d·ª± ƒëo√°n (VND)")
    ax.set_title("Gi√° trung b√¨nh vs Doanh thu d·ª± ƒëo√°n")
    st.pyplot(fig)

    # Area chart
    pred_df_sorted = pred_df.sort_values("Doanh thu d·ª± ƒëo√°n", ascending=False)
    pred_df_sorted["C·ªông d·ªìn"] = pred_df_sorted["Doanh thu d·ª± ƒëo√°n"].cumsum()

    fig, ax = plt.subplots(figsize=(8,5))
    ax.fill_between(pred_df_sorted["S·∫£n ph·∫©m"], pred_df_sorted["C·ªông d·ªìn"], color="skyblue", alpha=0.4)
    ax.plot(pred_df_sorted["S·∫£n ph·∫©m"], pred_df_sorted["C·ªông d·ªìn"], marker="o", color="blue")
    ax.set_title("Doanh thu d·ª± ƒëo√°n t√≠ch l≈©y theo s·∫£n ph·∫©m")
    ax.set_ylabel("T√≠ch l≈©y Doanh thu d·ª± ƒëo√°n (VND)")
    st.pyplot(fig)

else:
    st.info("‚¨ÜÔ∏è Vui l√≤ng t·∫£i file Excel ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch & d·ª± ƒëo√°n.")
