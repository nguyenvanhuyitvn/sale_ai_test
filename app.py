import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
st.title("Ph√¢n t√≠ch d·ªØ li·ªáu b√°n h√†ng (EDA) & Minh h·ªça Mean vs median")
#--- 0. Upload file Excel ---
st.sidebar.header("1. T·∫£i file d·ªØ li·ªáu")
uploaded_file = st.sidebar.file_uploader("Ch·ªçn file Excel", type=["xlsx"])
if uploaded_file:
    df = pd.read_excel(uploaded_file)

    # st.write("üìå Ki·ªÉu d·ªØ li·ªáu:")
    # st.write(df.dtypes)

    # for col in df.columns:
    #     unique_types = df[col].dropna().map(type).unique()
    #     st.write(f"üëâ C·ªôt {col}: {unique_types}")

    # df_fixed = df.convert_dtypes()  # Pandas t·ª± ƒëo√°n ki·ªÉu t·ªët nh·∫•t
    #df_fixed = df_fixed.astype(str) # N·∫øu v·∫´n l·ªói, √©p to√†n b·ªô sang chu·ªói
    # st.dataframe(df_fixed)

    # df["Ng√†y"] = pd.to_datetime(df["Ng√†y"]).astype("string")
    # #--- 1. Hi·ªÉn th·ªã d·ªØ li·ªáu th√¥---
    st.header("Xem d·ªØ li·ªáu th√¥")
    st.dataframe(df.head())
    st.subheader("üìä Th√¥ng tin c·ªôt d·ªØ li·ªáu")   
    st.write(f"üëâ D·ªØ li·ªáu c√≥ {df.shape[0]} d√≤ng, {df.shape[1]} c·ªôt")
    dtypes_df = df.dtypes.astype(str).reset_index()
    dtypes_df.columns = ["C·ªôt", "Ki·ªÉu d·ªØ li·ªáu"]
    st.dataframe(dtypes_df)
    #Ki·ªÉm tra gi√° tr·ªã thi·∫øu
    st.subheader("***Ki·ªÉm tra gi√° tr·ªã thi·∫øu***")
    describe_null = df.isnull().sum().reset_index()
    describe_null.columns = ["C·ªôt", "S·ªë gi√° tr·ªã thi·∫øu"]
    st.dataframe(describe_null)
    # Th·ªëng k√™ m√¥ t·∫£ c∆° b·∫£n
    st.subheader("üìà M√¥ t·∫£ d·ªØ li·ªáu (describe)")
    st.write(df.describe(include="all").transpose())
    st.subheader("üìä Th·ªëng k√™ m√¥ t·∫£")
    desc = df[["S·ªë l∆∞·ª£ng", "Gi√°", "Gi·∫£m gi√° (%)", "Doanh thu"]].describe()
    st.dataframe(desc)
    mean_value = df["Doanh thu"].mean()
    median_value = df["Doanh thu"].median()
    st.write(f"üëâ Mean Doanh thu: {mean_value} VND")
    st.write(f"üëâ Median Doanh thu: {median_value} VND")

    #--- 3. Histogram Doanh thu ---
    st.header("Histogram Doanh thu- Ph√¢n ph·ªëi Doanh thu")
    fig, ax = plt.subplots(figsize=(8, 5))
    sns.histplot(df["Doanh thu"], bins=30, kde=True, ax=ax)
    ax.axvline(mean_value, color="red", linestyle="--", label=f"Mean = {mean_value:,.0f}")
    ax.axvline(median_value, color="green", linestyle="--", label=f"Median = {median_value:,.0f}")
    ax.set_title("Ph√¢n ph·ªëi Doanh thu v·ªõi Mean v√† Median")
    ax.legend()
    st.pyplot(fig)
    #--- 4. Boxplot Doanh thu ---
    st.header("Boxplot Doanh thu - Ph√°t hi·ªán ngo·∫°i l·ªá")
    fig2, ax2 = plt.subplots(figsize=(8, 5))
    sns.boxplot(x=df["Doanh thu"], ax=ax2)
    ax2.set_title("Boxplot Doanh thu (Ph√°t hi·ªán ngo·∫°i l·ªá)")
    st.pyplot(fig2)
    #--- 5. Scatter plot S·ªë l∆∞·ª£ng vs Doanh thu ---
    st.header("Scatter plot S·ªë l∆∞·ª£ng vs Doanh thu")
    fig3, ax3 = plt.subplots(figsize=(8, 5))
    sns.scatterplot(x="S·ªë l∆∞·ª£ng", y="Doanh thu", data=df, ax=ax3)
    ax3.set_title("S·ªë l∆∞·ª£ng vs Doanh thu")
    st.pyplot(fig3)
    #--- 6. Bar chart - Doanh thu theo khu v·ª±c ---
    st.header("Bar chart - Doanh thu theo khu v·ª±c")
    revenue_by_region = df.groupby("Khu v·ª±c")["Doanh thu"].sum().reset_index()
    fig4, ax4 = plt.subplots(figsize=(8, 5))
    sns.barplot(x="Khu v·ª±c", y="Doanh thu", data=revenue_by_region, ax=ax4)
    ax4.set_title("T·ªïng Doanh thu theo Khu v·ª±c")
    st.pyplot(fig4)
    #--- 7. Line chart - Doanh thu theo th·ªùi gian ---
    st.header("Line chart - Doanh thu theo th·ªùi gian")
    df["Ng√†y"] = pd.to_datetime(df["Ng√†y"], errors='coerce')
    revenue_over_time = df.groupby("Ng√†y")["Doanh thu"].sum().reset_index()
    fig5, ax5 = plt.subplots(figsize=(10, 5))
    sns.lineplot(x="Ng√†y", y="Doanh thu", data=revenue_over_time, ax=ax5)
    ax5.set_title("T·ªïng Doanh thu theo Th·ªùi gian")
    st.pyplot(fig5)
    #---7. T∆∞∆°ng t√°c nh·∫≠p d·ªØ li·ªáu---
    st.header("T√≠nh th·ª≠ Doanh thu d·ª± ki·∫øn")
    st.subheader("Nh·∫≠p d·ªØ li·ªáu b√°n h√†ng m·ªõi:")
    col1, col2, col3 = st.columns(3)
    with col1:
        so_luong = st.number_input("S·ªë l∆∞·ª£ng s·∫£n ph·∫©m", min_value=1, max_value=100, value=10)
    with col2:
        gia = st.number_input("Gi√° s·∫£n ph·∫©m (VND)", min_value=1000, max_value=50000000, value=1000000, step=1000)
    with col3:
        giam_gia = st.slider("Gi·∫£m gi√° (%)", 0, 30, 10)
    if st.button("T√≠nh doanh thu d·ª± ki·∫øn"):
        doanh_thu_mau = so_luong * gia * (1 - giam_gia/100)
        st.write(f"üí∞ **Doanh thu d·ª± ki·∫øn**: {doanh_thu_mau:,.0f} VND")
        fig5, ax5 = plt.subplots(figsize=(8,4))
        sns.histplot(df["Doanh thu"], bins=30, kde=True, ax=ax5, color="lightblue")
        ax5.axvline(mean_value, color="red", linestyle="--", label=f"Mean = {mean_value:,.0f}")
        ax5.axvline(median_value, color="green", linestyle="--", label=f"Median = {median_value:,.0f}")
        ax5.axvline(doanh_thu_mau, color="blue", linestyle="-", label=f"M·∫´u nh·∫≠p = {doanh_thu_mau:,.0f}")
        ax5.set_title("V·ªã tr√≠ doanh thu m·∫´u so v·ªõi Mean & Median")
        ax5.legend()
        st.pyplot(fig5)
     # --- 8. Ph√¢n t√≠ch theo th·ªùi gian ---
    st.header("8Ô∏è‚É£ Ph√¢n t√≠ch theo th·ªùi gian")
    df["NƒÉm"] = df["Ng√†y"].dt.year
    df["Th√°ng"] = df["Ng√†y"].dt.month

    option = st.radio("Ch·ªçn c√°ch ph√¢n t√≠ch:", ["Theo nƒÉm", "Theo th√°ng"])

    if option == "Theo nƒÉm":
        year_rev = df.groupby("NƒÉm")["Doanh thu"].sum().reset_index()
        fig6, ax6 = plt.subplots(figsize=(6,4))
        sns.barplot(x="NƒÉm", y="Doanh thu", data=year_rev, ax=ax6)
        ax6.set_title("T·ªïng Doanh thu theo NƒÉm")
        st.pyplot(fig6)
    else:
        selected_year = st.selectbox("Ch·ªçn nƒÉm:", df["NƒÉm"].unique())
        month_rev = df[df["NƒÉm"]==selected_year].groupby("Th√°ng")["Doanh thu"].sum().reset_index()
        fig7, ax7 = plt.subplots(figsize=(8,4))
        sns.lineplot(x="Th√°ng", y="Doanh thu", data=month_rev, marker="o", ax=ax7)
        ax7.set_title(f"Doanh thu theo Th√°ng - NƒÉm {selected_year}")
        st.pyplot(fig7)
    # --- 9. D·ª± ƒëo√°n Doanh thu b·∫±ng sklearn ---
    st.header("9Ô∏è‚É£ D·ª± ƒëo√°n Doanh thu (Machine Learning)")

    # Ch·ªçn c√°c c·ªôt ƒë·ªÉ d·ª± b√°o
    X = df[["S·ªë l∆∞·ª£ng", "Gi√°", "Gi·∫£m gi√° (%)", "Danh m·ª•c", "Nh√† cung c·∫•p", "Khu v·ª±c", "Kh√°ch h√†ng", "Ph∆∞∆°ng th·ª©c thanh to√°n"]]
    y = df["Doanh thu"]

    # X·ª≠ l√Ω bi·∫øn categorical
    categorical_cols = ["Danh m·ª•c", "Nh√† cung c·∫•p", "Khu v·ª±c", "Kh√°ch h√†ng", "Ph∆∞∆°ng th·ª©c thanh to√°n"]
    numeric_cols = ["S·ªë l∆∞·ª£ng", "Gi√°", "Gi·∫£m gi√° (%)"]

    preprocessor = ColumnTransformer(
        transformers=[
            ("cat", OneHotEncoder(handle_unknown="ignore"), categorical_cols),
            ("num", "passthrough", numeric_cols)
        ]
    )

    # Pipeline m√¥ h√¨nh
    model = Pipeline(steps=[
        ("preprocessor", preprocessor),
        ("regressor", RandomForestRegressor(n_estimators=100, random_state=42))
    ])

    # Chia train/test
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Hu·∫•n luy·ªán
    model.fit(X_train, y_train)

    # ƒê√°nh gi√°
    y_pred = model.predict(X_test)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))

    st.write("**Hi·ªáu nƒÉng m√¥ h√¨nh:**")
    st.write(f"R¬≤: {r2:.3f}")
    st.write(f"MAE: {mae:,.0f} VND")
    st.write(f"RMSE: {rmse:,.0f} VND")

    # --- Form nh·∫≠p d·ªØ li·ªáu ƒë·ªÉ d·ª± ƒëo√°n ---
    st.subheader("üîÆ Th·ª≠ nh·∫≠p d·ªØ li·ªáu ƒë·ªÉ d·ª± ƒëo√°n Doanh thu")

    col1, col2 = st.columns(2)
    with col1:
        so_luong_in = st.number_input("S·ªë l∆∞·ª£ng", min_value=1, max_value=100, value=5)
        gia_in = st.number_input("Gi√° s·∫£n ph·∫©m (VND)", min_value=1000, max_value=50000000, value=2000000)
        giam_gia_in = st.slider("Gi·∫£m gi√° (%)", 0, 30, 5)
    with col2:
        danh_muc_in = st.selectbox("Danh m·ª•c", df["Danh m·ª•c"].unique())
        nha_cc_in = st.selectbox("Nh√† cung c·∫•p", df["Nh√† cung c·∫•p"].unique())
        khu_vuc_in = st.selectbox("Khu v·ª±c", df["Khu v·ª±c"].unique())
        khach_hang_in = st.selectbox("Kh√°ch h√†ng", df["Kh√°ch h√†ng"].unique())
        pttt_in = st.selectbox("Ph∆∞∆°ng th·ª©c thanh to√°n", df["Ph∆∞∆°ng th·ª©c thanh to√°n"].unique())

    # T·∫°o dataframe input
    input_data = pd.DataFrame({
        "S·ªë l∆∞·ª£ng": [so_luong_in],
        "Gi√°": [gia_in],
        "Gi·∫£m gi√° (%)": [giam_gia_in],
        "Danh m·ª•c": [danh_muc_in],
        "Nh√† cung c·∫•p": [nha_cc_in],
        "Khu v·ª±c": [khu_vuc_in],
        "Kh√°ch h√†ng": [khach_hang_in],
        "Ph∆∞∆°ng th·ª©c thanh to√°n": [pttt_in]
    })

    # D·ª± ƒëo√°n
    y_pred_input = model.predict(input_data)[0]
    st.success(f"üìà Doanh thu d·ª± ƒëo√°n: {y_pred_input:,.0f} VND")
    # # --- Bi·ªÉu ƒë·ªì ƒë√°nh gi√° m√¥ h√¨nh ---
    # st.subheader("üìä Bi·ªÉu ƒë·ªì ƒë√°nh gi√° m√¥ h√¨nh")

    # # Scatter: Th·ª±c t·∫ø vs D·ª± ƒëo√°n
    # fig8, ax8 = plt.subplots(figsize=(6,6))
    # sns.scatterplot(x=y_test, y=y_pred, alpha=0.5, ax=ax8)
    # ax8.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
    # ax8.set_xlabel("Doanh thu th·ª±c t·∫ø")
    # ax8.set_ylabel("Doanh thu d·ª± ƒëo√°n")
    # ax8.set_title("Scatter: Th·ª±c t·∫ø vs D·ª± ƒëo√°n")
    # st.pyplot(fig8)

    # # Residual plot
    # residuals = y_test - y_pred
    # fig9, ax9 = plt.subplots(figsize=(6,4))
    # sns.scatterplot(x=y_pred, y=residuals, alpha=0.5, ax=ax9)
    # ax9.axhline(0, color="red", linestyle="--")
    # ax9.set_xlabel("Doanh thu d·ª± ƒëo√°n")
    # ax9.set_ylabel("Ph·∫ßn d∆∞ (Residuals)")
    # ax9.set_title("Residual plot")
    # st.pyplot(fig9)

    # # Histogram ph·∫ßn d∆∞
    # fig10, ax10 = plt.subplots(figsize=(6,4))
    # sns.histplot(residuals, bins=30, kde=True, ax=ax10)
    # ax10.set_title("Ph√¢n ph·ªëi ph·∫ßn d∆∞ (Residuals)")
    # st.pyplot(fig10)

else:
    st.info("Vui l√≤ng t·∫£i l√™n file Excel ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch d·ªØ li·ªáu.")