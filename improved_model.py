import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error

# =============================
# 1. C·∫•u h√¨nh ·ª©ng d·ª•ng v√† CSS t√πy ch·ªânh
# =============================
st.set_page_config(page_title="D·ª± ƒëo√°n Doanh thu N√¢ng cao", layout="wide", initial_sidebar_state="expanded")
st.title("üìà ·ª®ng d·ª•ng D·ª± ƒëo√°n Doanh thu Th√¥ng minh")
st.markdown("""
<style>
    .stMetric {
        border: 1px solid #2e3b4e;
        border-radius: 10px;
        padding: 15px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        border-radius: 5px;
    }
</style>
""", unsafe_allow_html=True)

# =============================
# 2. C√°c h√†m x·ª≠ l√Ω (ƒê√É B·ªé CACHING)
# =============================
def load_data(uploaded_file):
    """ƒê·ªçc v√† ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ file Excel."""
    try:
        df = pd.read_excel(uploaded_file)
        # Ki·ªÉm tra c√°c c·ªôt c·∫ßn thi·∫øt
        required_cols = ["Ng√†y", "Gi√°", "S·ªë l∆∞·ª£ng", "Doanh thu", "Danh m·ª•c", "S·∫£n ph·∫©m"]
        if not all(col in df.columns for col in required_cols):
            st.error(f"L·ªói: File Excel ph·∫£i ch·ª©a c√°c c·ªôt b·∫Øt bu·ªôc: {', '.join(required_cols)}")
            return None
            
        df["Ng√†y"] = pd.to_datetime(df["Ng√†y"])
        return df
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói khi ƒë·ªçc file: {e}")
        return None

def feature_engineering(df):
    """T·∫°o c√°c ƒë·∫∑c tr∆∞ng m·ªõi t·ª´ d·ªØ li·ªáu th√¥."""
    df_processed = df.copy()
    df_processed["Th√°ng"] = df_processed["Ng√†y"].dt.month
    df_processed["Qu√Ω"] = df_processed["Ng√†y"].dt.quarter
    df_processed["Ng√†y_trong_tu·∫ßn"] = df_processed["Ng√†y"].dt.dayofweek # 0=Th·ª© 2
    df_processed["L√†_cu·ªëi_tu·∫ßn"] = df_processed["Ng√†y_trong_tu·∫ßn"].isin([5, 6]).astype(int)
    return df_processed

def train_model(df, model_choice):
    """Chu·∫©n b·ªã d·ªØ li·ªáu, hu·∫•n luy·ªán v√† tr·∫£ v·ªÅ m√¥ h√¨nh ƒë√£ train."""
    numeric_features = ["Gi√°", "S·ªë l∆∞·ª£ng", "Th√°ng", "Qu√Ω", "Ng√†y_trong_tu·∫ßn", "L√†_cu·ªëi_tu·∫ßn"]
    
    # T·ª± ƒë·ªông x√°c ƒë·ªãnh c√°c c·ªôt ph√¢n lo·∫°i
    categorical_features = df.select_dtypes(include=['object', 'category']).columns.tolist()
    
    # Ki·ªÉm tra xem c√≥ c·ªôt n√†o kh√¥ng h·ª£p l·ªá trong list kh√¥ng
    for col in ["Ng√†y"]: 
        if col in categorical_features:
            categorical_features.remove(col)

    X = df[numeric_features + categorical_features]
    y = df["Doanh thu"]

    # T·∫°o pipeline ti·ªÅn x·ª≠ l√Ω
    preprocessor = ColumnTransformer(
        transformers=[
            ("num", StandardScaler(), numeric_features),
            ("cat", OneHotEncoder(handle_unknown="ignore", sparse_output=False), categorical_features)
        ],
        remainder='passthrough'
    )

    # L·ª±a ch·ªçn m√¥ h√¨nh
    if model_choice == "Linear Regression":
        regressor = LinearRegression()
    elif model_choice == "Random Forest":
        regressor = RandomForestRegressor(n_estimators=100, random_state=42, n_jobs=-1)
    
    model = Pipeline([
        ("preprocessor", preprocessor),
        ("regressor", regressor)
    ])

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model.fit(X_train, y_train)

    return model, X_test, y_test, numeric_features, categorical_features

# =============================
# 3. Giao di·ªán ch√≠nh
# =============================
uploaded_file = st.file_uploader("‚¨ÜÔ∏è T·∫£i file Excel d·ªØ li·ªáu b√°n h√†ng c·ªßa b·∫°n", type=["xlsx", "xls"])

if uploaded_file is None:
    st.info("üí° Vui l√≤ng t·∫£i l√™n m·ªôt file Excel ƒë·ªÉ b·∫Øt ƒë·∫ßu. File c·∫ßn c√≥ c√°c c·ªôt nh∆∞ 'Ng√†y', 'Gi√°', 'S·ªë l∆∞·ª£ng', 'Doanh thu', 'S·∫£n ph·∫©m', 'Khu v·ª±c'...")
else:
    df_raw = load_data(uploaded_file)
    
    if df_raw is not None:
        st.success("‚úÖ ƒê√£ t·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu th√†nh c√¥ng!")
        df = feature_engineering(df_raw)
        # ---------------------------
        # Sidebar cho c√°c t√πy ch·ªçn
        # ---------------------------
        with st.sidebar:
            st.header("‚öôÔ∏è T√πy ch·ªçn M√¥ h√¨nh")
            model_choice = st.selectbox(
                "Ch·ªçn m√¥ h√¨nh AI ƒë·ªÉ d·ª± ƒëo√°n:",
                ("Linear Regression", "Random Forest")
            )
            st.info(f"B·∫°n ƒë√£ ch·ªçn: **{model_choice}**. M√¥ h√¨nh s·∫Ω ƒë∆∞·ª£c hu·∫•n luy·ªán tr√™n 80% d·ªØ li·ªáu.")

        # ---------------------------
        # Hu·∫•n luy·ªán m√¥ h√¨nh
        # ---------------------------
        model, X_test, y_test, numeric_features, categorical_features = train_model(df, model_choice)
        y_pred = model.predict(X_test)

        # ---------------------------
        # Tabbed Layout
        # ---------------------------
        tab1, tab2, tab3 = st.tabs(["üìä T·ªïng quan & ƒê√°nh gi√° M√¥ h√¨nh", "üîÆ D·ª± ƒëo√°n ƒê∆°n h√†ng M·ªõi", "üí° Ph√¢n t√≠ch S√¢u"])

        with tab1:
            st.header("T·ªïng quan Kinh doanh")
            col1, col2, col3 = st.columns(3)
            col1.metric("T·ªïng Doanh thu", f"{df['Doanh thu'].sum():,.0f} VND")
            col2.metric("T·ªïng S·ªë l∆∞·ª£ng B√°n", f"{df['S·ªë l∆∞·ª£ng'].sum():,.0f}")
            col3.metric("ƒê∆°n h√†ng Trung b√¨nh", f"{df['Doanh thu'].mean():,.0f} VND")

            st.header(f"ƒê√°nh gi√° Hi·ªáu su·∫•t M√¥ h√¨nh: {model_choice}")
            col1, col2, col3 = st.columns(3)
            r2 = r2_score(y_test, y_pred)
            mae = mean_absolute_error(y_test, y_pred)
            rmse = np.sqrt(mean_squared_error(y_test, y_pred))
            
            col1.metric("R-squared (R¬≤)", f"{r2:.2f}")
            col2.metric("Mean Absolute Error (MAE)", f"{mae:,.0f} VND")
            col3.metric("Root Mean Squared Error (RMSE)", f"{rmse:,.0f} VND")
            
            st.markdown(f"""
            - **R-squared ($R^2$)**: M√¥ h√¨nh c·ªßa b·∫°n gi·∫£i th√≠ch ƒë∆∞·ª£c **{r2:.1%}** s·ª± bi·∫øn thi√™n c·ªßa doanh thu. C√†ng g·∫ßn 1 c√†ng t·ªët.
            - **MAE**: Trung b√¨nh, d·ª± ƒëo√°n c·ªßa m√¥ h√¨nh sai l·ªách kho·∫£ng **{mae:,.0f} VND** so v·ªõi th·ª±c t·∫ø.
            - **RMSE**: Cho th·∫•y ƒë·ªô l·ªõn c·ªßa sai s·ªë, nh·∫•n m·∫°nh c√°c l·ªói d·ª± ƒëo√°n l·ªõn.
            """)
            
            # Bi·ªÉu ƒë·ªì so s√°nh
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.scatterplot(x=y_test, y=y_pred, alpha=0.6, ax=ax)
            ax.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], "r--", lw=2, label="ƒê∆∞·ªùng tham chi·∫øu (Th·ª±c t·∫ø = D·ª± ƒëo√°n)")
            ax.set_xlabel("Doanh thu Th·ª±c t·∫ø", fontsize=12)
            ax.set_ylabel("Doanh thu D·ª± ƒëo√°n", fontsize=12)
            ax.set_title(f"So s√°nh Doanh thu Th·ª±c t·∫ø v√† D·ª± ƒëo√°n ({model_choice})", fontsize=14)
            ax.legend()
            ax.grid(True)
            st.pyplot(fig)

        with tab2:
            # st.header("üìù D·ª± b√°o Doanh thu cho K·ªãch b·∫£n M·ªõi")
            # with st.form("predict_form"):
            #     st.subheader("Nh·∫≠p th√¥ng tin ƒë∆°n h√†ng")
                
            #     col1, col2 = st.columns(2)
            #     with col1:
            #         gia = st.number_input("Gi√° s·∫£n ph·∫©m (VND)", min_value=1000, value=500000, step=1000)
            #         soluong = st.number_input("S·ªë l∆∞·ª£ng", min_value=1, value=10)
            #         ngay_du_kien = st.date_input("Ng√†y giao d·ªãch d·ª± ki·∫øn")
                
            #     with col2:
            #         # Dynamically create selectboxes for categorical features
            #         input_data_cat = {}
            #         for feature in categorical_features:
            #             unique_vals = df[feature].unique()
            #             input_data_cat[feature] = st.selectbox(f"Ch·ªçn {feature}", unique_vals)
                
            #     submitted = st.form_submit_button("D·ª± ƒëo√°n Doanh thu")

            # if submitted:
            #     # Chu·∫©n b·ªã dataframe ƒë·∫ßu v√†o
            #     input_data = {
            #         "Gi√°": gia,
            #         "S·ªë l∆∞·ª£ng": soluong,
            #         "Th√°ng": ngay_du_kien.month,
            #         "Qu√Ω": (ngay_du_kien.month - 1) // 3 + 1,
            #         "Ng√†y_trong_tu·∫ßn": ngay_du_kien.weekday(),
            #         "L√†_cu·ªëi_tu·∫ßn": 1 if ngay_du_kien.weekday() >= 5 else 0
            #     }
            #     input_data.update(input_data_cat)
            #     print(input_data_cat)
            #     print(input_data)
            #     input_df = pd.DataFrame([input_data])
                
            #     # S·∫Øp x·∫øp l·∫°i c·ªôt cho ƒë√∫ng th·ª© t·ª±
            #     input_df = input_df[numeric_features + categorical_features]

            #     prediction = model.predict(input_df)[0]
            #     st.success(f"**D·ª± ƒëo√°n Doanh thu:** `{prediction:,.0f} VND`")
            #     st.balloons()
            with tab2:
                st.header("üìù D·ª± b√°o Doanh thu cho K·ªãch b·∫£n M·ªõi")
                with st.form("predict_form"):
                    st.subheader("Nh·∫≠p th√¥ng tin ƒë∆°n h√†ng")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        gia = st.number_input("Gi√° s·∫£n ph·∫©m (VND)", min_value=1000, value=500000, step=1000)
                        soluong = st.number_input("S·ªë l∆∞·ª£ng", min_value=1, value=10)
                        ngay_du_kien = st.date_input("Ng√†y giao d·ªãch d·ª± ki·∫øn")
                    
                    with col2:
                        # Dynamically create selectboxes for categorical features
                        input_data_cat = {}
                        for feature in categorical_features:
                            unique_vals = df[feature].unique()
                            input_data_cat[feature] = st.selectbox(f"Ch·ªçn {feature}", unique_vals)
                    
                    submitted = st.form_submit_button("D·ª± ƒëo√°n Doanh thu")

                if submitted:
                    # Chu·∫©n b·ªã dataframe ƒë·∫ßu v√†o
                    input_data = {
                        "Gi√°": gia,
                        "S·ªë l∆∞·ª£ng": soluong,
                        "Th√°ng": ngay_du_kien.month,
                        "Qu√Ω": (ngay_du_kien.month - 1) // 3 + 1,
                        "Ng√†y_trong_tu·∫ßn": ngay_du_kien.weekday(),
                        "L√†_cu·ªëi_tu·∫ßn": 1 if ngay_du_kien.weekday() >= 5 else 0
                    }
                    input_data.update(input_data_cat)
                    input_df = pd.DataFrame([input_data])
                    
                    # S·∫Øp x·∫øp l·∫°i c·ªôt cho ƒë√∫ng th·ª© t·ª±
                    input_df = input_df[numeric_features + categorical_features]

                    prediction = model.predict(input_df)[0]
                    st.success(f"**D·ª± ƒëo√°n Doanh thu:** `{prediction:,.0f} VND`")
                    st.balloons()
                    
                    # --- PH·∫¶N B·ªî SUNG BI·ªÇU ƒê·ªí B·∫ÆT ƒê·∫¶U ---

                    st.markdown("---")
                    st.subheader("üìä Tr·ª±c quan h√≥a k·∫øt qu·∫£ d·ª± ƒëo√°n")

                    col1, col2 = st.columns(2)

                    with col1:
                        # 1. Bi·ªÉu ƒë·ªì C·ªôt so s√°nh
                        st.markdown("##### So s√°nh v·ªõi Doanh thu Trung b√¨nh")
                        avg_revenue = df['Doanh thu'].mean()
                        
                        fig, ax = plt.subplots()
                        sns.barplot(
                            x=['Doanh thu Trung b√¨nh', 'Doanh thu D·ª± ƒëo√°n'],
                            y=[avg_revenue, prediction],
                            palette=['skyblue', 'lightgreen'],
                            ax=ax
                        )
                        ax.set_ylabel("Doanh thu (VND)")
                        ax.ticklabel_format(style='plain', axis='y')
                        # Th√™m gi√° tr·ªã tr√™n m·ªói c·ªôt
                        for p in ax.patches:
                            ax.annotate(f"{p.get_height():,.0f}", (p.get_x() + p.get_width() / 2., p.get_height()),
                                        ha='center', va='center', xytext=(0, 9), textcoords='offset points')
                        st.pyplot(fig)

                    with col2:
                        # 2. Bi·ªÉu ƒë·ªì ƒê∆∞·ªùng "What-If" theo s·ªë l∆∞·ª£ng
                        st.markdown("##### Ph√¢n t√≠ch n·∫øu thay ƒë·ªïi S·ªë l∆∞·ª£ng")
                        
                        # T·∫°o m·ªôt d·∫£i s·ªë l∆∞·ª£ng ƒë·ªÉ d·ª± ƒëo√°n, v√≠ d·ª• t·ª´ 1 ƒë·∫øn 50
                        quantity_range = np.arange(max(1, soluong - 20), soluong + 20, 1)
                        what_if_predictions = []
                        
                        # L·∫∑p qua t·ª´ng gi√° tr·ªã s·ªë l∆∞·ª£ng ƒë·ªÉ d·ª± ƒëo√°n
                        for qty in quantity_range:
                            temp_df = input_df.copy()
                            temp_df['S·ªë l∆∞·ª£ng'] = qty
                            pred = model.predict(temp_df)[0]
                            what_if_predictions.append(pred)
                            
                        fig, ax = plt.subplots()
                        ax.plot(quantity_range, what_if_predictions, marker='o', linestyle='--', label='Xu h∆∞·ªõng Doanh thu')
                        # ƒê√°nh d·∫•u ƒëi·ªÉm d·ª± ƒëo√°n hi·ªán t·∫°i
                        ax.plot(soluong, prediction, marker='*', markersize=15, color='red', label=f'D·ª± ƒëo√°n hi·ªán t·∫°i ({soluong} sp)')
                        ax.set_xlabel("S·ªë l∆∞·ª£ng s·∫£n ph·∫©m")
                        ax.set_ylabel("Doanh thu D·ª± ƒëo√°n (VND)")
                        ax.legend()
                        ax.grid(True)
                        ax.ticklabel_format(style='plain', axis='y')
                        st.pyplot(fig)

                    # --- PH·∫¶N B·ªî SUNG BI·ªÇU ƒê·ªí K·∫æT TH√öC ---
        
        with tab3:
            st.header("Ph√¢n t√≠ch D·ªØ li·ªáu Kh√°m ph√° (EDA)")
            
            st.subheader("Doanh thu theo Th√°ng")
            monthly_revenue = df.groupby("Th√°ng")["Doanh thu"].sum()
            fig, ax = plt.subplots()
            monthly_revenue.plot(kind='bar', ax=ax, color=sns.color_palette("viridis", 12))
            ax.set_ylabel("T·ªïng Doanh thu (VND)")
            ax.set_xlabel("Th√°ng")
            ax.ticklabel_format(style='plain', axis='y')
            st.pyplot(fig)

            st.subheader("Top 10 S·∫£n ph·∫©m c√≥ Doanh thu cao nh·∫•t")
            top_products = df.groupby("S·∫£n ph·∫©m")["Doanh thu"].sum().nlargest(10)
            fig, ax = plt.subplots()
            top_products.sort_values().plot(kind='barh', ax=ax, color=sns.color_palette("magma", 10))
            ax.set_xlabel("T·ªïng Doanh thu (VND)")
            ax.set_ylabel("S·∫£n ph·∫©m")
            st.pyplot(fig)