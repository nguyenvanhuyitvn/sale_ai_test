import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.statespace.sarimax import SARIMAX
from statsmodels.tsa.seasonal import seasonal_decompose
import warnings

warnings.filterwarnings("ignore")

# =============================
# 1. C·∫•u h√¨nh ·ª©ng d·ª•ng
# =============================
st.set_page_config(page_title="D·ª± b√°o Doanh thu D√≤ng s·∫£n ph·∫©m", layout="wide")
st.title("üöÄ D·ª± b√°o Doanh thu T∆∞∆°ng lai cho D√≤ng s·∫£n ph·∫©m")
st.write("·ª®ng d·ª•ng n√†y s·ª≠ d·ª•ng m√¥ h√¨nh SARIMA ƒë·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu qu√° kh·ª© v√† d·ª± b√°o doanh thu trong c√°c k·ª≥ ti·∫øp theo.")

# =============================
# 2. C√°c h√†m x·ª≠ l√Ω
# =============================
@st.cache_data
def load_and_preprocess_data(uploaded_file, category_col, date_col, revenue_col):
    """ƒê·ªçc, ki·ªÉm tra v√† ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu."""
    try:
        df = pd.read_excel(uploaded_file)
        if not all(col in df.columns for col in [category_col, date_col, revenue_col]):
            st.error(f"L·ªói: File ph·∫£i ch·ª©a c√°c c·ªôt '{category_col}', '{date_col}', v√† '{revenue_col}'.")
            return None, None
        
        df[date_col] = pd.to_datetime(df[date_col])
        df = df.sort_values(by=date_col)
        return df, df[category_col].unique()
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc file: {e}")
        return None, None

@st.cache_data
def aggregate_data(df, selected_category, time_freq, category_col, date_col, revenue_col):
    """L·ªçc v√† t·ªïng h·ª£p d·ªØ li·ªáu theo chu k·ª≥ th·ªùi gian."""
    df_filtered = df[df[category_col] == selected_category]
    
    # ƒê·∫∑t c·ªôt ng√†y l√†m ch·ªâ m·ª•c v√† t·ªïng h·ª£p doanh thu
    time_series = df_filtered.set_index(date_col)[revenue_col].resample(time_freq).sum()
    
    # ƒêi·ªÅn gi√° tr·ªã 0 cho c√°c k·ª≥ kh√¥ng c√≥ doanh thu
    # --- ƒê√É S·ª¨A L·ªñI ·ªû D√íNG D∆Ø·ªöI ƒê√ÇY ---
    time_series = time_series.asfreq(freq=time_freq, fill_value=0)
    return time_series

# =============================
# 3. Giao di·ªán ch√≠nh
# =============================
uploaded_file = st.file_uploader("‚¨ÜÔ∏è T·∫£i file Excel d·ªØ li·ªáu b√°n h√†ng c·ªßa b·∫°n", type=["xlsx", "xls"])

if uploaded_file:
    # --- Sidebar: N∆°i ng∆∞·ªùi d√πng nh·∫≠p c√°c t√πy ch·ªçn ---
    st.sidebar.header("‚öôÔ∏è C√†i ƒë·∫∑t Ph√¢n t√≠ch")
    
    # Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn t√™n c√°c c·ªôt quan tr·ªçng
    st.sidebar.info("Vui l√≤ng ch·ªçn t√™n c√°c c·ªôt t∆∞∆°ng ·ª©ng trong file c·ªßa b·∫°n.")
    date_col = st.sidebar.text_input("C·ªôt Ng√†y th√°ng", "Ng√†y")
    revenue_col = st.sidebar.text_input("C·ªôt Doanh thu", "Doanh thu")
    category_col = st.sidebar.text_input("C·ªôt D√≤ng s·∫£n ph·∫©m/Danh m·ª•c", "Danh m·ª•c")
    
    df, categories = load_and_preprocess_data(uploaded_file, category_col, date_col, revenue_col)

    if df is not None:
        st.sidebar.markdown("---")
        st.sidebar.header("üéØ T√πy ch·ªçn D·ª± b√°o")
        
        selected_category = st.sidebar.selectbox("1. Ch·ªçn D√≤ng s·∫£n ph·∫©m ƒë·ªÉ d·ª± b√°o:", categories)
        
        time_freq = st.sidebar.radio(
            "2. Ch·ªçn chu k·ª≥ ph√¢n t√≠ch:",
            ('Th√°ng (M)', 'Qu√Ω (Q)', 'Tu·∫ßn (W)'),
            key='time_freq_radio'
        )
        # L·∫•y m√£ chu k·ª≥: 'M', 'Q', 'W'
        freq_code = time_freq.split('(')[1][0]
        
        forecast_steps = st.sidebar.slider("3. Ch·ªçn s·ªë k·ª≥ mu·ªën d·ª± b√°o trong t∆∞∆°ng lai:", 1, 36, 12)
        
        if st.sidebar.button("B·∫Øt ƒë·∫ßu D·ª± b√°o!", use_container_width=True):
            st.success(f"ƒêang ti·∫øn h√†nh ph√¢n t√≠ch v√† d·ª± b√°o cho: **{selected_category}**...")

            # 1. T·ªïng h·ª£p d·ªØ li·ªáu
            time_series = aggregate_data(df, selected_category, freq_code, category_col, date_col, revenue_col)
            
            if len(time_series) < 24: # Y√™u c·∫ßu t·ªëi thi·ªÉu d·ªØ li·ªáu ƒë·ªÉ m√¥ h√¨nh ch·∫°y t·ªët
                 st.warning("D·ªØ li·ªáu c√≥ √≠t h∆°n 24 k·ª≥. K·∫øt qu·∫£ d·ª± b√°o c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c cao.")
            
            # 2. Chia tab hi·ªÉn th·ªã
            tab1, tab2 = st.tabs(["üìä Ph√¢n t√≠ch Chu·ªói th·ªùi gian", "üîÆ K·∫øt qu·∫£ D·ª± b√°o"])

            # --- Tab 1: Ph√¢n t√≠ch c√°c th√†nh ph·∫ßn c·ªßa chu·ªói th·ªùi gian ---
            with tab1:
                st.header("Ph√¢n t√≠ch c√°c th√†nh ph·∫ßn c·ªßa Doanh thu")
                st.write("Bi·ªÉu ƒë·ªì n√†y t√°ch doanh thu trong qu√° kh·ª© th√†nh 3 th√†nh ph·∫ßn ch√≠nh:")
                st.markdown("- **Trend (Xu h∆∞·ªõng):** H∆∞·ªõng ƒëi chung c·ªßa doanh thu (tƒÉng, gi·∫£m hay ƒëi ngang).")
                st.markdown("- **Seasonal (T√≠nh m√πa v·ª•):** C√°c quy lu·∫≠t l·∫∑p ƒëi l·∫∑p l·∫°i theo chu k·ª≥ (v√≠ d·ª•: th√°ng n√†o c≈©ng cao ƒëi·ªÉm).")
                st.markdown("- **Residual (Ph·∫ßn d∆∞):** Nh·ªØng bi·∫øn ƒë·ªông nhi·ªÖu, ng·∫´u nhi√™n kh√¥ng gi·∫£i th√≠ch ƒë∆∞·ª£c.")

                try:
                    decomposition = seasonal_decompose(time_series, model='additive', period=12 if freq_code=='M' else 4)
                    fig_decompose = decomposition.plot()
                    fig_decompose.set_size_inches(12, 8)
                    st.pyplot(fig_decompose)
                except Exception as e:
                    st.error(f"Kh√¥ng th·ªÉ ph√¢n r√£ chu·ªói th·ªùi gian. C√≥ th·ªÉ do d·ªØ li·ªáu qu√° ng·∫Øn ho·∫∑c kh√¥ng c√≥ t√≠nh m√πa v·ª• r√µ r√†ng. L·ªói: {e}")

            # --- Tab 2: D·ª± b√°o t∆∞∆°ng lai ---
            with tab2:
                st.header(f"D·ª± b√°o Doanh thu cho {forecast_steps} k·ª≥ ti·∫øp theo")

                # 3. Hu·∫•n luy·ªán m√¥ h√¨nh SARIMA
                # (p,d,q): c√°c tham s·ªë cho ph·∫ßn kh√¥ng m√πa v·ª•
                # (P,D,Q,m): c√°c tham s·ªë cho ph·∫ßn m√πa v·ª• (m=12 cho th√°ng, 4 cho qu√Ω)
                m = 12 if freq_code == 'M' else (4 if freq_code == 'Q' else 52)
                model = SARIMAX(time_series, order=(1, 1, 1), seasonal_order=(1, 1, 1, m))
                try:
                    results = model.fit(disp=False)
                    
                    # 4. L·∫•y k·∫øt qu·∫£ d·ª± b√°o
                    forecast = results.get_forecast(steps=forecast_steps)
                    pred_mean = forecast.predicted_mean
                    conf_int = forecast.conf_int()

                    # 5. V·∫Ω bi·ªÉu ƒë·ªì d·ª± b√°o
                    fig_forecast, ax = plt.subplots(figsize=(14, 7))
                    
                    # V·∫Ω d·ªØ li·ªáu l·ªãch s·ª≠
                    ax.plot(time_series.index, time_series, label='D·ªØ li·ªáu L·ªãch s·ª≠')
                    
                    # V·∫Ω ƒë∆∞·ªùng d·ª± b√°o
                    ax.plot(pred_mean.index, pred_mean, color='red', label='ƒê∆∞·ªùng D·ª± b√°o')
                    
                    # V·∫Ω v√πng tin c·∫≠y (v√πng kh√¥ng ch·∫Øc ch·∫Øn c·ªßa d·ª± b√°o)
                    ax.fill_between(conf_int.index, conf_int.iloc[:, 0], conf_int.iloc[:, 1], color='pink', alpha=0.5, label='V√πng tin c·∫≠y 95%')

                    ax.set_title(f"D·ª± b√°o Doanh thu cho '{selected_category}'", fontsize=16)
                    ax.set_xlabel("Th·ªùi gian")
                    ax.set_ylabel("Doanh thu")
                    ax.legend()
                    ax.grid(True)
                    st.pyplot(fig_forecast)

                    # 6. Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu d·ª± b√°o
                    st.subheader("B·∫£ng d·ªØ li·ªáu d·ª± b√°o chi ti·∫øt")
                    forecast_df = pd.DataFrame({
                        'Doanh thu D·ª± b√°o': pred_mean,
                        'D·ª± b√°o Th·∫•p (Lower CI)': conf_int.iloc[:, 0],
                        'D·ª± b√°o Cao (Upper CI)': conf_int.iloc[:, 1]
                    })
                    st.dataframe(forecast_df.style.format("{:,.0f} VND"))

                except Exception as e:
                    st.error(f"G·∫∑p l·ªói khi hu·∫•n luy·ªán ho·∫∑c d·ª± b√°o: {e}")
                    st.info("Vui l√≤ng th·ª≠ l·∫°i v·ªõi chu·ªói d·ªØ li·ªáu d√†i h∆°n ho·∫∑c ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o.")
else:
    st.info("‚¨ÜÔ∏è Vui l√≤ng t·∫£i l√™n m·ªôt file Excel ƒë·ªÉ b·∫Øt ƒë·∫ßu.")